// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

// turn decimal point off
assign HEX0[7] = 1'b1;
assign HEX1[7] = 1'b1;
assign HEX2[7] = 1'b1;
assign HEX3[7] = 1'b1;
assign HEX4[7] = 1'b1;
assign HEX5[7] = 1'b1;

assign HEX5[6:0] = 7'b1111111;
assign HEX4[6:0] = 7'b1111111;
assign HEX3[6:0] = 7'b1111111;

bcd_code_converter bcc_red (
	.bcd_digit (SW[9:6]), 
	.segments (HEX2[6:0])
);
bcd_code_converter bcc_green (
	.bcd_digit (SW[5:2]), 
	.segments (HEX1[6:0])
);
bcd_code_converter bcc_blue (
	.bcd_digit ({SW[1:0], key1_state, key0_state}), 
	.segments (HEX0[6:0])
);



reg key0_state;
reg key1_state;

// both keys have a schmitt trigger. a click of a button lasts on order of milliseconds
// at 40 MHz, 65536 (2 ** 16) cycles is 1.6 ms
reg [15:0] key0_debounce_counter;
reg [15:0] key1_debounce_counter;

reg key0_debouncing_state;
reg key1_debouncing_state;

// keep track of last bit state in the VGA clock domain so I don't have to think about crossing
initial begin
	key0_state = 1'b0;
	key1_state = 1'b0;
	
	key0_debounce_counter = 0;
	key1_debounce_counter = 0;

	key0_debouncing_state = 1'b0;
	key1_debouncing_state = 1'b0;
end

always @(VGA_CLK1_40) begin
	if(key0_debouncing_state == 1'b0) begin
		if (KEY[0] == 1'b0) begin
			key0_state = ~key0_state; // how to avoid key1_state becoming a latch? I though it would be clocked FF
			key0_debouncing_state = 1'b1;
		end
		key0_debounce_counter <= 0;
	end else begin
		// if about to overflow, timer finished, so reset debouncing state
		if(key0_debounce_counter == 16'hffff) begin
			key0_debouncing_state = 1'b0;
		end else begin
			key0_debouncing_state = 1'b1; // without this line Quartus infers a latch? 
		end
		key0_debounce_counter = key0_debounce_counter + 1;
	end

	if(key1_debouncing_state == 1'b0) begin
		if (KEY[1] == 1'b0) begin
			key1_state = ~key1_state; // how to avoid key1_state becoming a latch? I though it would be clocked FF
			key1_debouncing_state = 1'b1;
		end
		key1_debounce_counter <= 0;
	end else begin
		// if about to overflow, timer finished, so reset debouncing state
		if(key1_debounce_counter == 16'hffff) begin
			key1_debouncing_state = 1'b0;
		end else begin
			key1_debouncing_state = 1'b1; // without this line Quartus infers a latch? 
		end
		key1_debounce_counter = key1_debounce_counter + 1;
	end
end

wire [11:0] vga_color_selector;
// key 1 is closer to the switches that represent high bits of blue
// so makes sense to have key 1 be a higher bit of blue
assign vga_color_selector = {SW[9:0], key1_state, key0_state};


//=======================================================
//  Structural coding
//=======================================================

wire vga_clk;

pll0 VGA_CLK1_40 (
	.inclk0 (MAX10_CLK1_50),
	.c0 (vga_clk)
);

vga_driver #(
    .H_VISIBLE_AREA(800),
    .H_FRONT_PORCH(40),
    .H_SYNC_PULSE(128),
    .H_BACK_PORCH(88),

    .V_VISIBLE_AREA(600),
    .V_FRONT_PORCH(1),
    .V_SYNC_PULSE(4),
    .V_BACK_PORCH(23),

    // 1 for positive HSYNC pulse (i.e starts low goes high)
    // 0 for negative HSYNC pulse (i.e. starts high goes low)
    .HSYNC_POLARITY(1'b1),
    .VSYNC_POLARITY(1'b1)
)

vga_handler (
    .VGA_CLK(vga_clk),
	.VGA_COLOR(vga_color_selector),
    .VGA_B(VGA_B),
    .VGA_R(VGA_R),
    .VGA_G(VGA_G),
    .VGA_HS(VGA_HS),
    .VGA_VS(VGA_VS),
    .LEDR(LEDR)
);

endmodule
